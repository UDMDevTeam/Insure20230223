<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WpfRichText</name>
    </assembly>
    <members>
        <member name="T:WpfRichText.RichTextBoxAssistant">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.RichTextBoxAssistant.BoundDocument">
            <summary></summary>
        </member>
        <member name="M:WpfRichText.RichTextBoxAssistant.GetBoundDocument(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="dependencyObject"></param>
            <returns></returns>
        </member>
        <member name="M:WpfRichText.RichTextBoxAssistant.SetBoundDocument(System.Windows.DependencyObject,System.String)">
            <summary>
            
            </summary>
            <param name="dependencyObject"></param>
            <param name="value"></param>
        </member>
        <member name="T:WpfRichText.CommandReference">
            <summary>
            This class facilitates associating a key binding in XAML markup to a command
            defined in a View Model by exposing a Command dependency property.
            The class derives from Freezable to work around a limitation in WPF when data-binding from XAML.
            </summary>
        </member>
        <member name="M:WpfRichText.CommandReference.#ctor">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.CommandReference.CommandProperty">
            <summary></summary>
        </member>
        <member name="P:WpfRichText.CommandReference.Command">
            <summary></summary>
        </member>
        <member name="M:WpfRichText.CommandReference.CanExecute(System.Object)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:WpfRichText.CommandReference.Execute(System.Object)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="E:WpfRichText.CommandReference.CanExecuteChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:WpfRichText.CommandReference.CreateInstanceCore">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:WpfRichText.DelegateCommand">
            <summary>
                This class allows delegating the commanding logic to methods passed as parameters,
                and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand.#ctor(System.Action)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean},System.Boolean)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand.CanExecute">
            <summary>
                Method to determine if the command can be executed
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand.Execute">
            <summary>
                Execution of the command
            </summary>
        </member>
        <member name="P:WpfRichText.DelegateCommand.IsAutomaticRequeryDisabled">
            <summary>
                Property to enable or disable CommandManager's automatic requery on this command
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChaged event
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand.OnCanExecuteChanged">
            <summary>
                Protected virtual method to raise CanExecuteChanged event
            </summary>
        </member>
        <member name="E:WpfRichText.DelegateCommand.CanExecuteChanged">
            <summary>
                ICommand.CanExecuteChanged implementation
            </summary>
        </member>
        <member name="T:WpfRichText.DelegateCommand`1">
            <summary>
                This class allows delegating the commanding logic to methods passed as parameters,
                and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
            <typeparam name="T">Type of the parameter passed to the delegates</typeparam>
        </member>
        <member name="M:WpfRichText.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand`1.CanExecute(`0)">
            <summary>
                Method to determine if the command can be executed
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand`1.Execute(`0)">
            <summary>
                Execution of the command
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand`1.RaiseCanExecuteChanged">
            <summary>
                Raises the CanExecuteChaged event
            </summary>
        </member>
        <member name="M:WpfRichText.DelegateCommand`1.OnCanExecuteChanged">
            <summary>
                Protected virtual method to raise CanExecuteChanged event
            </summary>
        </member>
        <member name="P:WpfRichText.DelegateCommand`1.IsAutomaticRequeryDisabled">
            <summary>
                Property to enable or disable CommandManager's automatic requery on this command
            </summary>
        </member>
        <member name="E:WpfRichText.DelegateCommand`1.CanExecuteChanged">
            <summary>
                ICommand.CanExecuteChanged implementation
            </summary>
        </member>
        <member name="T:WpfRichText.CommandManagerHelper">
            <summary>
                This class contains methods for the CommandManager that help avoid memory leaks by
                using weak references.
            </summary>
        </member>
        <member name="T:WpfRichText.RichTextEditor">
            <summary>
            Interaction logic for BindableRichTextbox.xaml
            </summary>
            <summary>
            RichTextEditor
            </summary>
        </member>
        <member name="F:WpfRichText.RichTextEditor.TextProperty">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.RichTextEditor.IsToolBarVisibleProperty">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.RichTextEditor.IsContextMenuEnabledProperty">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.RichTextEditor.IsReadOnlyProperty">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.RichTextEditor.AvailableFontsProperty">
            <summary></summary>
        </member>
        <member name="M:WpfRichText.RichTextEditor.#ctor">
            <summary></summary>
        </member>
        <member name="P:WpfRichText.RichTextEditor.Text">
            <summary></summary>
        </member>
        <member name="P:WpfRichText.RichTextEditor.IsToolBarVisible">
            <summary></summary>
        </member>
        <member name="P:WpfRichText.RichTextEditor.IsContextMenuEnabled">
            <summary></summary>
        </member>
        <member name="P:WpfRichText.RichTextEditor.IsReadOnly">
            <summary></summary>
        </member>
        <member name="P:WpfRichText.RichTextEditor.AvailableFonts">
            <summary></summary>
        </member>
        <member name="M:WpfRichText.RichTextEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:WpfRichText.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.charactergrowfont">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.charactershrinkfont">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.cross">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.cut">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.editredo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.editundo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.page_copy">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.page_paste">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.text_align_center">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.text_align_justify">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.text_align_left">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.text_align_right">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.text_bold">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.text_indent">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.text_indent_remove">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.text_italic">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.text_list_bullets">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.text_list_numbers">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.text_underline">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.tick">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WpfRichText.Properties.Resources.world_link">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:WpfRichText.HtmlFromXamlConverter">
            <summary>
            HtmlToXamlConverter is a static class that takes an HTML string
            and converts it into XAML
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlFromXamlConverter.ConvertXamlToHtml(System.String,System.Boolean)">
            <summary>
            Main entry point for Xaml-to-Html converter.
            Converts a xaml string into html string.
            </summary>
            <param name="xamlString">Xaml strinng to convert.</param>
            <param name="asFlowDocument"></param>
            <returns>
            Html string produced from a source xaml.
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlFromXamlConverter.WriteFlowDocument(System.Xml.XmlTextReader,System.Xml.XmlTextWriter)">
            <summary>
            Processes a root level element of XAML (normally it's FlowDocument element).
            </summary>
            <param name="xamlReader">
            XmlTextReader for a source xaml.
            </param>
            <param name="htmlWriter">
            XmlTextWriter producing resulting html
            </param>
        </member>
        <member name="M:WpfRichText.HtmlFromXamlConverter.WriteFormattingProperties(System.Xml.XmlTextReader,System.Xml.XmlTextWriter,System.Text.StringBuilder)">
            <summary>
            Reads attributes of the current xaml element and converts
            them into appropriate html attributes or css styles.
            </summary>
            <param name="xamlReader">
            XmlTextReader which is expected to be at XmlNodeType.Element
            (opening element tag) position.
            The reader will remain at the same level after function complete.
            </param>
            <param name="htmlWriter">
            XmlTextWriter for output html, which is expected to be in
            after WriteStartElement state.
            </param>
            <param name="inlineStyle">
            String builder for collecting css properties for inline STYLE attribute.
            </param>
        </member>
        <member name="M:WpfRichText.HtmlFromXamlConverter.WriteElementContent(System.Xml.XmlTextReader,System.Xml.XmlTextWriter,System.Text.StringBuilder)">
            <summary>
            Reads a content of current xaml element, converts it
            </summary>
            <param name="xamlReader">
            XmlTextReader which is expected to be at XmlNodeType.Element
            (opening element tag) position.
            </param>
            <param name="htmlWriter">
            May be null, in which case we are skipping the xaml element;
            witout producing any output to html.
            </param>
            <param name="inlineStyle">
            StringBuilder used for collecting css properties for inline STYLE attribute.
            </param>
        </member>
        <member name="M:WpfRichText.HtmlFromXamlConverter.AddComplexProperty(System.Xml.XmlTextReader,System.Text.StringBuilder)">
            <summary>
            Conberts an element notation of complex property into
            </summary>
            <param name="xamlReader">
            On entry this XmlTextReader must be on Element start tag;
            on exit - on EndElement tag.
            </param>
            <param name="inlineStyle">
            StringBuilder containing a value for STYLE attribute.
            </param>
        </member>
        <member name="M:WpfRichText.HtmlFromXamlConverter.WriteElement(System.Xml.XmlTextReader,System.Xml.XmlTextWriter,System.Text.StringBuilder)">
            <summary>
            Converts a xaml element into an appropriate html element.
            </summary>
            <param name="xamlReader">
            On entry this XmlTextReader must be on Element start tag;
            on exit - on EndElement tag.
            </param>
            <param name="htmlWriter">
            May be null, in which case we are skipping xaml content
            without producing any html output
            </param>
            <param name="inlineStyle">
            StringBuilder used for collecting css properties for inline STYLE attributes on every level.
            </param>
        </member>
        <member name="M:WpfRichText.HtmlFromXamlConverter.ReadNextToken(System.Xml.XmlReader)">
            <summary>
            Reads several items from xamlReader skipping all non-significant stuff.
            </summary>
            <param name="xamlReader">
            XmlTextReader from tokens are being read.
            </param>
            <returns>
            True if new token is available; false if end of stream reached.
            </returns>
        </member>
        <member name="T:WpfRichText.HtmlLexicalAnalyzer">
            <summary>
            lexical analyzer class
            recognizes tokens as groups of characters separated by arbitrary amounts of whitespace
            also classifies tokens according to type
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.#ctor(System.String)">
            <summary>
            initializes the _inputStringReader member with the string to be read
            also sets initial values for _nextCharacterCode and _nextTokenType
            </summary>
            <param name="inputTextString">
            text string to be parsed for xml content
            </param>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.GetNextContentToken">
            <summary>
            retrieves next recognizable token from input string 
            and identifies its type
            if no valid token is found, the output parameters are set to null
            if end of stream is reached without matching any token, token type
            paramter is set to EOF
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.GetNextTagToken">
            <summary>
            Unconditionally returns a token which is one of: TagEnd, EmptyTagEnd, Name, Atom or EndOfStream
            Does not guarantee token reader advancing.
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.GetNextEqualSignToken">
            <summary>
            Unconditionally returns equal sign token. Even if there is no
            real equal sign in the stream, it behaves as if it were there.
            Does not guarantee token reader advancing.
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.GetNextAtomToken">
            <summary>
            Unconditionally returns an atomic value for an attribute
            Even if there is no appropriate token it returns Atom value
            Does not guarantee token reader advancing.
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.GetNextCharacter">
            <summary>
            Advances a reading position by one character code
            and reads the next availbale character from a stream.
            This character becomes available as NextCharacter property.
            </summary>
            <remarks>
            Throws InvalidOperationException if attempted to be called on EndOfStream
            condition.
            </remarks>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.SkipWhiteSpace">
            <summary>
            skips whitespace in the input string
            leaves the first non-whitespace character available in the NextCharacter property
            this may be the end-of-file character, it performs no checking 
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.IsGoodForNameStart(System.Char)">
            <summary>
            checks if a character can be used to start a name
            if this check is true then the rest of the name can be read
            </summary>
            <param name="character">
            character value to be checked
            </param>
            <returns>
            true if the character can be the first character in a name
            false otherwise
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.IsGoodForName(System.Char)">
            <summary>
            checks if a character can be used as a non-starting character in a name
            uses the IsExtender and IsCombiningCharacter predicates to see
            if a character is an extender or a combining character
            </summary>
            <param name="character">
            character to be checked for validity in a name
            </param>
            <returns>
            true if the character can be a valid part of a name
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.IsCombiningCharacter(System.Char)">
            <summary>
            identifies a character as being a combining character, permitted in a name
            TODO: only a placeholder for now but later to be replaced with comparisons against
            the list of combining characters in the XML documentation
            </summary>
            <param name="character">
            character to be checked
            </param>
            <returns>
            true if the character is a combining character, false otherwise
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.IsExtender(System.Char)">
            <summary>
            identifies a character as being an extender, permitted in a name
            TODO: only a placeholder for now but later to be replaced with comparisons against
            the list of extenders in the XML documentation
            </summary>
            <param name="character">
            character to be checked
            </param>
            <returns>
            true if the character is an extender, false otherwise
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.ReadDynamicContent">
            <summary>
            skips dynamic content starting with  ![ and ending with ]
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.ReadComment">
            <summary>
            skips comments starting with !- and ending with --
            NOTE: 10/06/2004: processing changed, will now skip anything starting with
            the !-  sequence and ending in ! or -, because in practice many html pages do not
            use the full comment specifying conventions
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.ReadUnknownDirective">
            <summary>
            skips past unknown directives that start with ! but are not comments or Cdata
            ignores content of such directives until the next  character
            applies to directives such as DOCTYPE, etc that we do not presently support
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlLexicalAnalyzer.SkipProcessingDirective">
            <summary>
            skips processing directives starting with the characters ? and ending with ?
            NOTE: 10/14/2004: IE also ends processing directives with a />, so this function is
            being modified to recognize that condition as well
            </summary>
        </member>
        <member name="T:WpfRichText.HtmlParser">
            <summary>
            HtmlParser class accepts a string of possibly badly formed Html, parses it and returns a string
            of well-formed Html that is as close to the original string in content as possible
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlParser.#ctor(System.String)">
            <summary>
            Constructor. Initializes the _htmlLexicalAnalayzer element with the given input string
            </summary>
            <param name="inputString">
            string to parsed into well-formed Html
            </param>
        </member>
        <member name="M:WpfRichText.HtmlParser.ParseHtml(System.String)">
            <summary>
            Instantiates an HtmlParser element and calls the parsing function on the given input string
            </summary>
            <param name="htmlString">
            Input string of pssibly badly-formed Html to be parsed into well-formed Html
            </param>
            <returns>
            XmlElement rep
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlParser.ExtractHtmlFromClipboardData(System.String)">
            <summary>
            Extracts Html string from clipboard data by parsing header information in htmlDataString
            </summary>
            <param name="htmlDataString">
            String representing Html clipboard data. This includes Html header
            </param>
            <returns>
            String containing only the Html data part of htmlDataString, without header
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlParser.AddHtmlClipboardHeader(System.String)">
            <summary>
            Adds Xhtml header information to Html data string so that it can be placed on clipboard
            </summary>
            <param name="htmlString">
            Html string to be placed on clipboard with appropriate header
            </param>
            <returns>
            String wrapping htmlString with appropriate Html header
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlParser.ParseHtmlContent">
            <summary>
            Parses the stream of html tokens starting
            from the name of top-level element.
            Returns XmlElement representing the top-level
            html element
            </summary>
        </member>
        <member name="T:WpfRichText.HtmlSchema">
            <summary>
            HtmlSchema class
            maintains static information about HTML structure
            can be used by HtmlParser to check conditions under which an element starts or ends, etc.
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlSchema.#cctor">
            <summary>
            static constructor, initializes the ArrayLists
            that hold the elements in various sub-components of the schema
            e.g _htmlEmptyElements, etc.
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlSchema.IsEmptyElement(System.String)">
            <summary>
            returns true when xmlElementName corresponds to empty element 
            </summary>
            <param name="xmlElementName">
            string representing name to test
            </param>
        </member>
        <member name="M:WpfRichText.HtmlSchema.IsBlockElement(System.String)">
            <summary>
            returns true if xmlElementName represents a block formattinng element.
            It used in an algorithm of transferring inline elements over block elements
            in HtmlParser
            </summary>
            <param name="xmlElementName"></param>
            <returns></returns>
        </member>
        <member name="M:WpfRichText.HtmlSchema.IsInlineElement(System.String)">
            <summary>
            returns true if the xmlElementName represents an inline formatting element
            </summary>
            <param name="xmlElementName"></param>
            <returns></returns>
        </member>
        <member name="M:WpfRichText.HtmlSchema.IsKnownOpenableElement(System.String)">
            <summary>
            It is a list of known html elements which we
            want to allow to produce bt HTML parser,
            but don'tt want to act as inline, block or no-scope.
            Presence in this list will allow to open
            elements during html parsing, and adding the
            to a tree produced by html parser.
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlSchema.ClosesOnParentElementEnd(System.String)">
            <summary>
            returns true when xmlElementName closes when the outer element closes
            this is true of elements with optional start tags
            </summary>
            <param name="xmlElementName">
            string representing name to test
            </param>
        </member>
        <member name="M:WpfRichText.HtmlSchema.ClosesOnNextElementStart(System.String,System.String)">
            <summary>
            returns true if the current element closes when the new element, whose name has just been read, starts
            </summary>
            <param name="currentElementName">
            string representing current element name
            </param>
            <param name="nextElementName"></param>
            string representing name of the next element that will start
        </member>
        <member name="M:WpfRichText.HtmlSchema.IsEntity(System.String)">
            <summary>
            returns true if the string passed as argument is an Html entity name
            </summary>
            <param name="entityName">
            string to be tested for Html entity name 
            </param>
        </member>
        <member name="M:WpfRichText.HtmlSchema.EntityCharacterValue(System.String)">
            <summary>
            returns the character represented by the entity name string which is passed as an argument, if the string is an entity name
            as specified in _htmlCharacterEntities, returns the character value of 0 otherwise 
            </summary>
            <param name="entityName">
            string representing entity name whose character value is desired
            </param>
        </member>
        <member name="M:WpfRichText.HtmlSchema.InitializeEmptyElements">
            <summary>
            initializes _htmlEmptyElements with empty elements in HTML 4 spec at
            http://www.w3.org/TR/REC-html40/index/elements.html
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlSchema.InitializeElementsClosingOnParentElementEnd">
            <summary>
            initializes _htmlElementsClosingOnParentElementEnd with the list of HTML 4 elements for which closing tags are optional
            we assume that for any element for which closing tags are optional, the element closes when it's outer element
            (in which it is nested) does
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlSchema.InitializeHtmlCharacterEntities">
            <summary>
            initializes _htmlCharacterEntities hashtable with the character corresponding to entity names
            </summary>
        </member>
        <member name="T:WpfRichText.HtmlTokenType">
            <summary>
            types of lexical tokens for html-to-xaml converter
            </summary>
        </member>
        <member name="T:WpfRichText.HtmlToXamlConverter">
            <summary>
            HtmlToXamlConverter is a static class that takes an HTML string
            and converts it into XAML
            </summary>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.ConvertHtmlToXaml(System.String,System.Boolean)">
            <summary>
            Converts an html string into xaml string.
            </summary>
            <param name="htmlString">
            Input html which may be badly formated xml.
            </param>
            <param name="asFlowDocument">
            true indicates that we need a FlowDocument as a root element;
            false means that Section or Span elements will be used
            dependeing on StartFragment/EndFragment comments locations.
            </param>
            <returns>
            Well-formed xml representing XAML equivalent for the input html string.
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.GetAttribute(System.Xml.XmlElement,System.String)">
            <summary>
            Returns a value for an attribute by its name (ignoring casing)
            </summary>
            <param name="element">
            XmlElement in which we are trying to find the specified attribute
            </param>
            <param name="attributeName">
            String representing the attribute name to be searched for
            </param>
            <returns></returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.UnQuote(System.String)">
            <summary>
            Returns string extracted from quotation marks
            </summary>
            <param name="value">
            String representing value enclosed in quotation marks
            </param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddBlock(System.Xml.XmlElement,System.Xml.XmlNode,System.Collections.Hashtable,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Analyzes the given htmlElement expecting it to be converted
            into some of xaml Block elements and adds the converted block
            to the children collection of xamlParentElement.
            
            Analyzes the given XmlElement htmlElement, recognizes it as some HTML element
            and adds it as a child to a xamlParentElement.
            In some cases several following siblings of the given htmlElement
            will be consumed too (e.g. LIs encountered without wrapping UL/OL, 
            which must be collected together and wrapped into one implicit List element).
            </summary>
            <param name="xamlParentElement">
            Parent xaml element, to which new converted element will be added
            </param>
            <param name="htmlNode">
            Source html element subject to convert to xaml.
            </param>
            <param name="inheritedProperties">
            Properties inherited from an outer context.
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
            <returns>
            Last processed html node. Normally it should be the same htmlElement
            as was passed as a paramater, but in some irregular cases
            it could one of its following siblings.
            The caller must use this node to get to next sibling from it.
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddSection(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Generates Section or Paragraph element from DIV depending whether it contains any block elements or not
            </summary>
            <param name="xamlParentElement">
            XmlElement representing Xaml parent to which the converted element should be added
            </param>
            <param name="htmlElement">
            XmlElement representing Html element to be converted
            </param>
            <param name="inheritedProperties">
            properties inherited from parent context
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext">
            true indicates that a content added by this call contains at least one block element
            </param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddParagraph(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Generates Paragraph element from P, H1-H7, Center etc.
            </summary>
            <param name="xamlParentElement">
            XmlElement representing Xaml parent to which the converted element should be added
            </param>
            <param name="htmlElement">
            XmlElement representing Html element to be converted
            </param>
            <param name="inheritedProperties">
            properties inherited from parent context
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext">
            true indicates that a content added by this call contains at least one block element
            </param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddImplicitParagraph(System.Xml.XmlElement,System.Xml.XmlNode,System.Collections.Hashtable,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Creates a Paragraph element and adds all nodes starting from htmlNode
            converted to appropriate Inlines.
            </summary>
            <param name="xamlParentElement">
            XmlElement representing Xaml parent to which the converted element should be added
            </param>
            <param name="htmlNode">
            XmlNode starting a collection of implicitly wrapped inlines.
            </param>
            <param name="inheritedProperties">
            properties inherited from parent context
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext">
            true indicates that a content added by this call contains at least one block element
            </param>
            <returns>
            The last htmlNode added to the implicit paragraph
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddList(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Converts Html ul or ol element into Xaml list element. During conversion if the ul/ol element has any children 
            that are not li elements, they are ignored and not added to the list element
            </summary>
            <param name="xamlParentElement">
            XmlElement representing Xaml parent to which the converted element should be added
            </param>
            <param name="htmlListElement">
            XmlElement representing Html ul/ol element to be converted
            </param>
            <param name="inheritedProperties">
            properties inherited from parent context
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddOrphanListItems(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            If li items are found without a parent ul/ol element in Html string, creates xamlListElement as their parent and adds
            them to it. If the previously added node to the same xamlParentElement was a List, adds the elements to that list.
            Otherwise, we create a new xamlListElement and add them to it. Elements are added as long as li elements appear sequentially.
            The first non-li or text node stops the addition.
            </summary>
            <param name="xamlParentElement">
            Parent element for the list
            </param>
            <param name="htmlLIElement">
            Start Html li element without parent list
            </param>
            <param name="inheritedProperties">
            Properties inherited from parent context
            </param>
            <param name="sourceContext"></param>
            <param name="stylesheet"></param>
            <returns>
            XmlNode representing the first non-li node in the input after one or more li's have been processed.
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddListItem(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Converts htmlLIElement into Xaml ListItem element, and appends it to the parent xamlListElement
            </summary>
            <param name="xamlListElement">
            XmlElement representing Xaml List element to which the converted td/th should be added
            </param>
            <param name="htmlLIElement">
            XmlElement representing Html li element to be converted
            </param>
            <param name="inheritedProperties">
            Properties inherited from parent context
            </param>
            <param name="sourceContext"></param>
            <param name="stylesheet"></param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddTable(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Converts htmlTableElement to a Xaml Table element. Adds tbody elements if they are missing so
            that a resulting Xaml Table element is properly formed.
            </summary>
            <param name="xamlParentElement">
            Parent xaml element to which a converted table must be added.
            </param>
            <param name="htmlTableElement">
            XmlElement reprsenting the Html table element to be converted
            </param>
            <param name="inheritedProperties">
            Hashtable representing properties inherited from parent context. 
            </param>
            <param name="sourceContext"></param>
            <param name="stylesheet"></param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddColumnInformation(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.ArrayList,System.Collections.Hashtable,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Processes the information about table columns - COLGROUP and COL html elements.
            </summary>
            <param name="htmlTableElement">
            XmlElement representing a source html table.
            </param>
            <param name="xamlTableElement">
            XmlElement repesenting a resulting xaml table.
            </param>
            <param name="columnStartsAllRows">
            Array of doubles - column start coordinates.
            Can be null, which means that column size information is not available
            and we must use source colgroup/col information.
            In case wneh it's not null, we will ignore source colgroup/col information.
            </param>
            <param name="currentProperties"></param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddTableColumnGroup(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Converts htmlColgroupElement into Xaml TableColumnGroup element, and appends it to the parent
            xamlTableElement
            </summary>
            <param name="xamlTableElement">
            XmlElement representing Xaml Table element to which the converted column group should be added
            </param>
            <param name="htmlColgroupElement">
            XmlElement representing Html colgroup element to be converted
            </param>
            <param name="inheritedProperties">
            Properties inherited from parent context
            </param>
            <param name="sourceContext"></param>
            <param name="stylesheet"></param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddTableColumn(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Hashtable,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Converts htmlColElement into Xaml TableColumn element, and appends it to the parent
            xamlTableColumnGroupElement
            </summary>
            <param name="xamlTableElement"></param>
            <param name="htmlColElement">
            XmlElement representing Html col element to be converted
            </param>
            <param name="inheritedProperties">
            properties inherited from parent context
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddTableRowsToTableBody(System.Xml.XmlElement,System.Xml.XmlNode,System.Collections.Hashtable,System.Collections.ArrayList,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Adds TableRow elements to xamlTableBodyElement. The rows are converted from Html tr elements that
            may be the children of an Html tbody element or an Html table element with tbody missing
            </summary>
            <param name="xamlTableBodyElement">
            XmlElement representing Xaml TableRowGroup element to which the converted rows should be added
            </param>
            <param name="htmlTRStartNode">
            XmlElement representing the first tr child of the tbody element to be read
            </param>
            <param name="currentProperties">
            Hashtable representing current properties of the tbody element that are generated and applied in the
            AddTable function; to be used as inheritedProperties when adding tr elements
            </param>
            <param name="columnStarts"></param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
            <returns>
            XmlNode representing the current position of the iterator among tr elements
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddTableCellsToTableRow(System.Xml.XmlElement,System.Xml.XmlNode,System.Collections.Hashtable,System.Collections.ArrayList,System.Collections.ArrayList,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Adds TableCell elements to xamlTableRowElement.
            </summary>
            <param name="xamlTableRowElement">
            XmlElement representing Xaml TableRow element to which the converted cells should be added
            </param>
            <param name="htmlTDStartNode">
            XmlElement representing the child of tr or tbody element from which we should start adding td elements
            </param>
            <param name="currentProperties">
            properties of the current html tr element to which cells are to be added
            </param>
            <param name="activeRowSpans"></param>
            <param name="columnStarts"></param>
            <param name="sourceContext"></param>
            <param name="stylesheet"></param>
            <returns>
            XmlElement representing the current position of the iterator among the children of the parent Html tbody/tr element
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AddDataToTableCell(System.Xml.XmlElement,System.Xml.XmlNode,System.Collections.Hashtable,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            adds table cell data to xamlTableCellElement
            </summary>
            <param name="xamlTableCellElement">
            XmlElement representing Xaml TableCell element to which the converted data should be added
            </param>
            <param name="htmlDataStartNode">
            XmlElement representing the start element of data to be added to xamlTableCellElement
            </param>
            <param name="currentProperties">
            Current properties for the html td/th element corresponding to xamlTableCellElement
            </param>
            <param name="sourceContext"></param>
            <param name="stylesheet"></param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AnalyzeTableStructure(System.Xml.XmlElement,WpfRichText.CssStylesheet)">
            <summary>
            Performs a parsing pass over a table to read information about column width and rowspan attributes. This information
            is used to determine the starting point of each column. 
            </summary>
            <param name="htmlTableElement">
            XmlElement representing Html table whose structure is to be analyzed
            </param>
            <param name="stylesheet"></param>
            <returns>
            ArrayList of type double which contains the function output. If analysis is successful, this ArrayList contains
            all the points which are the starting position of any column in the table, ordered from left to right.
            In case if analisys was impossible we return null.
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AnalyzeTbodyStructure(System.Xml.XmlElement,System.Collections.ArrayList,System.Collections.ArrayList,System.Double,WpfRichText.CssStylesheet)">
            <summary>
            Performs a parsing pass over a tbody to read information about column width and rowspan attributes. Information read about width
            attributes is stored in the reference ArrayList parameter columnStarts, which contains a list of all starting
            positions of all columns in the table, ordered from left to right. Row spans are taken into consideration when 
            computing column starts
            </summary>
            <param name="htmlTbodyElement">
            XmlElement representing Html tbody whose structure is to be analyzed
            </param>
            <param name="columnStarts">
            ArrayList of type double which contains the function output. If analysis fails, this parameter is set to null
            </param>
            <param name="tableWidth">
            Current width of the table. This is used to determine if a new column when added to the end of table should
            come after the last column in the table or is actually splitting the last column in two. If it is only splitting
            the last column it should inherit row span for that column
            </param>
            <param name="activeRowSpans"></param>
            <param name="stylesheet"></param>
            <returns>
            Calculated width of a tbody.
            In case of non-analizable column width structure return 0;
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.AnalyzeTRStructure(System.Xml.XmlElement,System.Collections.ArrayList,System.Collections.ArrayList,System.Double,WpfRichText.CssStylesheet)">
            <summary>
            Performs a parsing pass over a tr element to read information about column width and rowspan attributes.  
            </summary>
            <param name="htmlTRElement">
            XmlElement representing Html tr element whose structure is to be analyzed
            </param>
            <param name="columnStarts">
            ArrayList of type double which contains the function output. If analysis is successful, this ArrayList contains
            all the points which are the starting position of any column in the tr, ordered from left to right. If analysis fails,
            the ArrayList is set to null
            </param>
            <param name="activeRowSpans">
            ArrayList representing all columns currently spanned by an earlier row span attribute. These columns should
            not be used for data in this row. The ArrayList actually contains notation for all columns in the table, if the
            active row span is set to 0 that column is not presently spanned but if it is > 0 the column is presently spanned
            </param>
            <param name="tableWidth">
            Double value representing the current width of the table.
            Return 0 if analisys was insuccessful.
            </param>
            <param name="stylesheet"></param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.GetRowSpan(System.Xml.XmlElement)">
            <summary>
            Gets row span attribute from htmlTDElement. Returns an integer representing the value of the rowspan attribute.
            Default value if attribute is not specified or if it is invalid is 1
            </summary>
            <param name="htmlTDElement">
            Html td element to be searched for rowspan attribute
            </param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.GetNextColumnIndex(System.Int32,System.Double,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Gets index at which a column should be inseerted into the columnStarts ArrayList. This is
            decided by the value columnStart. The columnStarts ArrayList is ordered in ascending order.
            Returns an integer representing the index at which the column should be inserted
            </summary>
            <param name="columnStarts">
            Array list representing starting coordinates of all columns in the table
            </param>
            <param name="columnWidth">
            </param>
            <param name="columnIndex">
            Int representing the current column index. This acts as a clue while finding the insertion index.
            If the value of columnStarts at columnIndex is the same as columnStart, then this position alrady exists
            in the array and we can jsut return columnIndex.
            </param>
            <param name="activeRowSpans"></param>
            <returns></returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.ClearActiveRowSpans(System.Collections.ArrayList)">
            <summary>
            Used for clearing activeRowSpans array in the beginning/end of each tbody
            </summary>
            <param name="activeRowSpans">
            ArrayList representing currently active row spans
            </param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.InitializeActiveRowSpans(System.Collections.ArrayList,System.Int32)">
            <summary>
            Used for initializing activeRowSpans array in the before adding rows to tbody element
            </summary>
            <param name="activeRowSpans">
            ArrayList representing currently active row spans
            </param>
            <param name="count">
            Size to be give to array list
            </param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.GetNextColumnStart(System.Xml.XmlElement,System.Double)">
            <summary>
            Calculates width of next TD element based on starting position of current element and it's width, which
            is calculated byt he function
            </summary>
            <param name="htmlTDElement">
            XmlElement representing Html td element whose width is to be read
            </param>
            <param name="columnStart">
            Starting position of current column
            </param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.CalculateColumnSpan(System.Int32,System.Double,System.Collections.ArrayList)">
            <summary>
            Calculates column span based the column width and the widths of all other columns. Returns an integer representing 
            the column span
            </summary>
            <param name="columnIndex">
            Index of the current column
            </param>
            <param name="columnWidth">
            Width of the current column
            </param>
            <param name="columnStarts">
            ArrayList repsenting starting coordinates of all columns
            </param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.VerifyColumnStartsAscendingOrder(System.Collections.ArrayList)">
            <summary>
            Verifies that values in columnStart, which represent starting coordinates of all columns, are arranged
            in ascending order
            </summary>
            <param name="columnStarts">
            ArrayList representing starting coordinates of all columns
            </param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.ApplyLocalProperties(System.Xml.XmlElement,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Analyzes local properties of Html element, converts them into Xaml equivalents, and applies them to xamlElement
            </summary>
            <param name="xamlElement">
            XmlElement representing Xaml element to which properties are to be applied
            </param>
            <param name="localProperties">
            Hashtable representing local properties of Html element that is converted into xamlElement
            </param>
            <param name="isBlock"></param>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.GetElementProperties(System.Xml.XmlElement,System.Collections.Hashtable,System.Collections.Hashtable@,WpfRichText.CssStylesheet,System.Collections.Generic.List{System.Xml.XmlElement})">
            <summary>
            Analyzes the tag of the htmlElement and infers its associated formatted properties.
            After that parses style attribute and adds all inline css styles.
            The resulting style attributes are collected in output parameter localProperties.
            </summary>
            <param name="htmlElement">
            </param>
            <param name="inheritedProperties">
            set of properties inherited from ancestor elements. Currently not used in the code. Reserved for the future development.
            </param>
            <param name="localProperties">
            returns all formatting properties defined by this element - implied by its tag, its attributes, or its css inline style
            </param>
            <param name="stylesheet"></param>
            <param name="sourceContext"></param>
            <returns>
            returns a combination of previous context with local set of properties.
            This value is not used in the current code - inntended for the future development.
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.GetCssAttribute(System.String,System.String)">
            <summary>
            Extracts a value of css attribute from css style definition.
            </summary>
            <param name="cssStyle">
            Source csll style definition
            </param>
            <param name="attributeName">
            A name of css attribute to extract
            </param>
            <returns>
            A string rrepresentation of an attribute value if found;
            null if there is no such attribute in a given string.
            </returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.TryGetLengthValue(System.String,System.Double@)">
            <summary>
            Converts a length value from string representation to a double.
            </summary>
            <param name="lengthAsString">
            Source string value of a length.
            </param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:WpfRichText.HtmlToXamlConverter.ApplyPropertiesToTableCellElement(System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Applies properties to xamlTableCellElement based on the html td element it is converted from.
            </summary>
            <param name="htmlChildNode">
            Html td/th element to be converted to xaml
            </param>
            <param name="xamlTableCellElement">
            XmlElement representing Xaml element for which properties are to be processed
            </param>
            <remarks>
            TODO: Use the processed properties for htmlChildNode instead of using the node itself 
            </remarks>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.XamlFlowDocument">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.XamlRun">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.XamlSpan">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.XamlHyperlink">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.XamlHyperlinkNavigateUri">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.XamlHyperlinkTargetName">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.XamlSection">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.XamlList">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.XamlListMarkerStyle">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_List_MarkerStyle_None">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_List_MarkerStyle_Decimal">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_List_MarkerStyle_Disc">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_List_MarkerStyle_Circle">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_List_MarkerStyle_Square">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_List_MarkerStyle_Box">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_List_MarkerStyle_LowerLatin">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_List_MarkerStyle_UpperLatin">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_List_MarkerStyle_LowerRoman">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_List_MarkerStyle_UpperRoman">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_ListItem">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_LineBreak">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_Paragraph">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_Margin">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_Padding">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_BorderBrush">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_BorderThickness">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_Table">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_TableColumn">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_TableRowGroup">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_TableRow">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_TableCell">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_TableCell_BorderThickness">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_TableCell_BorderBrush">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_TableCell_ColumnSpan">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_TableCell_RowSpan">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_Width">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_Brushes_Black">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_FontFamily">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_FontSize">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_FontSize_XXLarge">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_FontSize_XLarge">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_FontSize_Large">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_FontSize_Medium">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_FontSize_Small">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_FontSize_XSmall">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_FontSize_XXSmall">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_FontWeight">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_FontWeight_Bold">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_FontStyle">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_Foreground">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_Background">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_TextDecorations">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_TextDecorations_Underline">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_TextIndent">
            <summary></summary>
        </member>
        <member name="F:WpfRichText.HtmlToXamlConverter.Xaml_TextAlignment">
            <summary></summary>
        </member>
    </members>
</doc>
