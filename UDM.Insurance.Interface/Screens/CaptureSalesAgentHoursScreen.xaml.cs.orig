using System;
using System.Windows;
using System.Windows.Input;
using System.ComponentModel;
using Embriant.Framework.Configuration;
using System.Data;
using UDM.Insurance.Business;
using System.Windows.Threading;
using System.Threading;
using Infragistics.Windows.DataPresenter;
using UDM.Insurance.Business.Mapping;
using UDM.Insurance.Interface.Windows;
using System.Windows.Controls;
using UDM.WPF.Library;
using System.Data.SqlClient;
using Embriant.Framework;
using Embriant.Framework.Data;

namespace UDM.Insurance.Interface.Screens
{
    /// <summary>
    /// Interaction logic for CaptureSalesAgentWorkingHoursScreen.xaml
    /// </summary>
    public partial class CaptureSalesAgentHoursScreen
    {
        private bool isFirstLoad = true;
        private long _shiftTypeID = 0;
        private long _userTypeID = 0;
        private long _selectedAgentID = -1;
        private long _selectedCampaignId = -1;
        private long _selectedUserHourID = -1;
        private long UserHourID = 0;
        bool _isPublicHoliday = false;
        public CaptureSalesAgentHoursScreen(long userHourID)
        {
            InitializeComponent();
            
            if (userHourID > 0)
            {
                UserHourID = userHourID;
                LoadAgentsScreen();

                DataRow selectedItem = Methods.GetTableData("select * from UserHours where ID = " + userHourID).Rows[0];

                #region Morning Shift
                string morningShiftStart = selectedItem["MorningShiftStartTime"].ToString();
                string morningShiftEnd = selectedItem["MorningShiftEndTime"].ToString();
                if (morningShiftStart != string.Empty)
                {
                    dteMorningShiftStartTime.Value = morningShiftStart;
                }
                else
                {
                    dteMorningShiftStartTime.Value = null;
                }
                if (morningShiftEnd != string.Empty)
                {
                    dteMorningShiftEndTime.Value = morningShiftEnd;
                }
                else
                {
                    dteMorningShiftEndTime.Value = null;
                }
                #endregion Morning Shift
                #region Normal Shift
                string normalShiftStart = selectedItem["NormalShiftStartTime"].ToString();
                string normalShiftEnd = selectedItem["NormalShiftEndTime"].ToString();
                if (normalShiftStart != string.Empty)
                {
                    dteNormalShiftStartTime.Value = normalShiftStart;
                }
                else
                {
                    dteNormalShiftStartTime.Value = null;
                }
                if (normalShiftEnd != string.Empty)
                {
                    dteNormalShiftEndTime.Value = normalShiftEnd;
                }
                else
                {
                    dteNormalShiftEndTime.Value = null;
                }
                #endregion Normal Shift
                #region evening shift
                string eveningShiftStart = selectedItem["EveningShiftStartTime"].ToString();
                string eveningShiftEnd = selectedItem["EveningShiftEndTime"].ToString();
                if (eveningShiftStart != string.Empty)
                {
                    dteEveningShiftStartTime.Value = eveningShiftStart;
                }
                else
                {
                    dteEveningShiftStartTime.Value = null;
                }
                if (eveningShiftEnd != string.Empty)
                {

                    dteEveningShiftEndTime.Value = eveningShiftEnd;
                }
                else
                {
                    dteEveningShiftEndTime.Value = null;
                }
                #endregion evening shift
                #region weekend and public holiday
                string weekendPublicHolidayStart = selectedItem["PublicHolidayWeekendShiftStartTime"].ToString();
                string weekendPublicHolidayEnd = selectedItem["PublicHolidayWeekendShiftEndTime"].ToString();
                if (weekendPublicHolidayStart != string.Empty)
                {
                    dteWeekendPublicHolidayShiftStartTime.Value = weekendPublicHolidayStart;
                }
                else
                {
                    dteWeekendPublicHolidayShiftStartTime.Value = null;
                }
                if (weekendPublicHolidayEnd != string.Empty)
                {
                    dteWeekendPublicHolidayShiftEndTime.Value = weekendPublicHolidayEnd;
                }
                else
                {
                    dteWeekendPublicHolidayShiftEndTime.Value = null;
                }
                #endregion weekend and public holiday
                lblEditMode.Visibility = Visibility.Visible;
                imgEditMode.Visibility = Visibility.Visible;
                btnStopEditing.Visibility = Visibility.Visible;
                dteDate.Value = DateTime.Parse(selectedItem["WorkingDate"].ToString());

               
                #region Campaign
                cmbCampaigns.SelectedValue = selectedItem["FKINCampaignID"].ToString();
                #endregion Campaign

                string shiftTypeID = selectedItem["FKShiftTypeID"].ToString();
                if (shiftTypeID != string.Empty)
                {
                    cmbShiftType.SelectedValue = selectedItem["FKShiftTypeID"].ToString();
                }
                long userID = long.Parse(selectedItem["FKUserID"].ToString());
                int index = 0;
                foreach (DataRowView item in cmbAgents.Items)
                {
                    long agentID = 0;
                    agentID = long.Parse(item.Row[0].ToString());
                    if (agentID == userID)
                    {
                        cmbAgents.SelectedIndex = index;
                        break;
                    }
                    index++;
                }
               
               
            }

        }
        private void buttonClose_Click(object sender, RoutedEventArgs e)
        {
            OnDialogClose(_dialogResult);

        }

        private void BaseControl_Loaded(object sender, RoutedEventArgs e)
        {
            
           
            if (UserHourID == 0)
            {
                LoadAgentsScreen();
                dteDate.Value = DateTime.Now.Date;
                _shiftTypeID = 1;
            }
        }

        private void cmbShiftType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

            DataRowView selectedItem = (DataRowView)cmbShiftType.SelectedItem;
            _shiftTypeID = long.Parse(selectedItem.Row[0].ToString());

            if (_shiftTypeID == 1)
            {
                lblMorningShift.Visibility = Visibility.Collapsed;
                dteMorningShiftStartTime.Visibility = Visibility.Collapsed;
                lblToMorning.Visibility = Visibility.Collapsed;
                dteMorningShiftEndTime.Visibility = Visibility.Collapsed;
                dteMorningShiftStartTime.Value = null;
                dteMorningShiftEndTime.Value = null;
                //normal
                Grid.SetRow(lblNormalShift, Grid.GetRow(lblNormalShift) - 1);
                Grid.SetRow(lblToNormal, Grid.GetRow(lblToNormal) - 1);
                Grid.SetRow(dteNormalShiftStartTime, Grid.GetRow(dteNormalShiftStartTime) - 1);
                Grid.SetRow(dteNormalShiftEndTime, Grid.GetRow(dteNormalShiftEndTime) - 1);
                //evening
                Grid.SetRow(lblEveningShift, Grid.GetRow(lblEveningShift) - 1);
                Grid.SetRow(lblToEvening, Grid.GetRow(lblToEvening) - 1);
                Grid.SetRow(dteEveningShiftStartTime, Grid.GetRow(dteEveningShiftStartTime) - 1);
                Grid.SetRow(dteEveningShiftEndTime, Grid.GetRow(dteEveningShiftEndTime) - 1);
                //weekend
                Grid.SetRow(lblWeekend, Grid.GetRow(lblWeekend) - 1);
                Grid.SetRow(lblToWeekend, Grid.GetRow(lblToWeekend) - 1);
                Grid.SetRow(dteWeekendPublicHolidayShiftStartTime, Grid.GetRow(dteWeekendPublicHolidayShiftStartTime) - 1);
                Grid.SetRow(dteWeekendPublicHolidayShiftEndTime, Grid.GetRow(dteWeekendPublicHolidayShiftEndTime) - 1);


            }
            else
            {
                lblMorningShift.Visibility = Visibility.Visible;
                dteMorningShiftStartTime.Visibility = Visibility.Visible;
                lblToMorning.Visibility = Visibility.Visible;
                dteMorningShiftEndTime.Visibility = Visibility.Visible;

                //normal
                Grid.SetRow(lblNormalShift, Grid.GetRow(lblNormalShift) + 1);
                Grid.SetRow(lblToNormal, Grid.GetRow(lblToNormal) + 1);
                Grid.SetRow(dteNormalShiftStartTime, Grid.GetRow(dteNormalShiftStartTime) + 1);
                Grid.SetRow(dteNormalShiftEndTime, Grid.GetRow(dteNormalShiftEndTime) + 1);
                //evening
                Grid.SetRow(lblEveningShift, Grid.GetRow(lblEveningShift) + 1);
                Grid.SetRow(lblToEvening, Grid.GetRow(lblToEvening) + 1);
                Grid.SetRow(dteEveningShiftStartTime, Grid.GetRow(dteEveningShiftStartTime) + 1);
                Grid.SetRow(dteEveningShiftEndTime, Grid.GetRow(dteEveningShiftEndTime) + 1);
                //weekend
                Grid.SetRow(lblWeekend, Grid.GetRow(lblWeekend) + 1);
                Grid.SetRow(lblToWeekend, Grid.GetRow(lblToWeekend) + 1);
                Grid.SetRow(dteWeekendPublicHolidayShiftStartTime, Grid.GetRow(dteWeekendPublicHolidayShiftStartTime) + 1);
                Grid.SetRow(dteWeekendPublicHolidayShiftEndTime, Grid.GetRow(dteWeekendPublicHolidayShiftEndTime) + 1);
            }
            if (isFirstLoad == false)
            {
                ShiftChange();
            }
            if (isFirstLoad == true)
            {
                isFirstLoad = false;
            }

        }

        private void LoadAgentsScreen()
        {
            try
            {
                SqlParameter[] parameters = new SqlParameter[1];
                parameters[0] = new SqlParameter("@UserID", GlobalSettings.ApplicationUser.ID);
                DataSet dsAgentDetails = Methods.ExecuteStoredProcedure("SpSalesAgentHoursScreen", parameters);
                if (dsAgentDetails.Tables[0].Rows.Count > 0)//agents
                {
                    cmbAgents.Populate(dsAgentDetails.Tables[0], "AgentName", "ID");
                }
                if (dsAgentDetails.Tables[1].Rows.Count > 0)//campaigns
                {
                    cmbCampaigns.Populate(dsAgentDetails.Tables[1], "CamapaigName", "ID");
                }
                if (dsAgentDetails.Tables[2].Rows.Count > 0)
                {
                    _userTypeID = long.Parse(dsAgentDetails.Tables[2].Rows[0]["FKUserType"].ToString());
                    //if its a sales agent select current user
                    if (_userTypeID == 2)
                    {
                        dteDate.Value = DateTime.Now.Date;
                        cmbAgents.SelectedIndex = 0;//there will be only one agent name in this list
                        dteDate.IsEnabled = false;//agent cannot change date
                    }
                }
                if (dsAgentDetails.Tables[3].Rows.Count > 0)//shift types
                {
                    cmbShiftType.Populate(dsAgentDetails.Tables[3], "Description", "ID");
                    if (UserHourID == 0)
                    {
                        cmbShiftType.SelectedIndex = 0;
                    }
                }

            }
            catch (Exception ex)
            {
                HandleException(ex);
            }
        }

        private void dteDate_ValueChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
        {

            ShiftChange();
        }

        private void ShiftChange()
        {
            try
            {
                bool isPublicHoliday = false;
                bool isUdmHoliday = false;
                DateTime selectedDate = (DateTime)dteDate.Value;

                DataSet dsHolidays = Methods.ExecuteStoredProcedure("spGetHolidays", null);
                DataTable dtPublicHolidays = dsHolidays.Tables[0];
                DataTable dtUDMHolidays = dsHolidays.Tables[1];
                //check if selected date is public holiday
                var pubHoliday = dtPublicHolidays.AsEnumerable().Where(x => (DateTime)x["Date"] == selectedDate.Date);
                foreach (var holiday in pubHoliday)//this will loop once because only onde day can be a holiday
                {
                    isPublicHoliday = true;
                   
                    lblDescriptionText.Text = holiday["Description"].ToString() + " :" + selectedDate.DayOfWeek;
                    SqlParameter[] parameters = new SqlParameter[2];
                    parameters[0] = new SqlParameter("@ShiftTypeID", _shiftTypeID);
                    parameters[1] = new SqlParameter("@ShiftID", 4);  //weekend or public holiday shift
                    DataTable dtshiftHours = Methods.ExecuteStoredProcedure("SpGetShiftTimes", parameters).Tables[0];

                    if (dtshiftHours.Rows.Count > 0)
                    {
                        string startTime = dtshiftHours.Rows[0]["StartTime"].ToString();
                        string endTime = dtshiftHours.Rows[0]["EndTime"].ToString();
                        if (startTime != string.Empty)
                        {
                            dteWeekendPublicHolidayShiftStartTime.Value = startTime;
                        }
                        else
                        {
                            dteWeekendPublicHolidayShiftStartTime.Value = null;
                        }
                        if (endTime != string.Empty)
                        {
                            dteWeekendPublicHolidayShiftEndTime.Value = endTime;
                        }
                        else
                        {
                            dteWeekendPublicHolidayShiftEndTime.Value = null;
                        }

                        dteNormalShiftStartTime.Value = null;
                        dteNormalShiftEndTime.Value = null;
                        dteMorningShiftStartTime.Value = null;
                        dteMorningShiftEndTime.Value = null;
                        dteEveningShiftStartTime.Value = null;
                        dteEveningShiftEndTime.Value = null;
                        dteMorningShiftEndTime.Value = null;
                    }
                }
                _isPublicHoliday = isPublicHoliday;
                //check if selected date is company recess
                var udmHoliday = dtUDMHolidays.AsEnumerable().Where(x => (DateTime)x["Date"] == selectedDate.Date);
                foreach (var uholiday in udmHoliday)
                {
                    isUdmHoliday = true;
                    lblDescriptionText.Text = "Company Recess :" + selectedDate.DayOfWeek;
                    SqlParameter[] parameters = new SqlParameter[2];
                    parameters[0] = new SqlParameter("@ShiftTypeID", _shiftTypeID);
                    parameters[1] = new SqlParameter("@ShiftID", 4);  //weekend or public holiday shift
                    DataTable dtshiftHours = Methods.ExecuteStoredProcedure("SpGetShiftTimes", parameters).Tables[0];

                    if (dtshiftHours.Rows.Count > 0)
                    {
                        string startTime = dtshiftHours.Rows[0]["StartTime"].ToString();
                        string endTime = dtshiftHours.Rows[0]["EndTime"].ToString();
                        if (startTime != string.Empty)
                        {
                            dteWeekendPublicHolidayShiftStartTime.Value = startTime;
                        }
                        else
                        {
                            dteWeekendPublicHolidayShiftStartTime.Value = null;
                        }
                        if (endTime != string.Empty)
                        {
                            dteWeekendPublicHolidayShiftEndTime.Value = endTime;
                        }
                        else
                        {
                            dteWeekendPublicHolidayShiftEndTime.Value = null;
                        }

                        dteNormalShiftStartTime.Value = null;
                        dteNormalShiftEndTime.Value = null;
                        dteMorningShiftStartTime.Value = null;
                        dteMorningShiftEndTime.Value = null;
                        dteEveningShiftStartTime.Value = null;
                        dteEveningShiftEndTime.Value = null;
                        dteMorningShiftEndTime.Value = null;
                    }
                }

                if (isPublicHoliday == false && isUdmHoliday == false)
                {

                    if (selectedDate.DayOfWeek == DayOfWeek.Friday)
                    {
                        lblDescriptionText.Text = "Normal Business Day: " + selectedDate.DayOfWeek;
                        //get shift type hours
                        SqlParameter[] parameters = new SqlParameter[2];
                        parameters[0] = new SqlParameter("@ShiftTypeID", _shiftTypeID);
                        parameters[1] = new SqlParameter("@ShiftID", 5);  //friday shift
                        DataTable dtshiftHours = Methods.ExecuteStoredProcedure("SpGetShiftTimes", parameters).Tables[0];

                        if (dtshiftHours.Rows.Count > 0)
                        {
                            string startTime = dtshiftHours.Rows[0]["StartTime"].ToString();
                            string endTime = dtshiftHours.Rows[0]["EndTime"].ToString();
                            if (startTime != string.Empty)
                            {
                                dteNormalShiftStartTime.Value = startTime;
                            }
                            else
                            {
                                dteNormalShiftStartTime.Value = null;
                            }
                            if (endTime != string.Empty)
                            {
                                dteNormalShiftEndTime.Value = endTime;
                            }
                            else
                            {
                                dteNormalShiftEndTime.Value = null;
                            }
                            dteMorningShiftStartTime.Value = null;
                            dteMorningShiftEndTime.Value = null;
                            dteEveningShiftStartTime.Value = null;
                            dteEveningShiftEndTime.Value = null;
                            dteMorningShiftEndTime.Value = null;
                            dteWeekendPublicHolidayShiftStartTime.Value = null;
                            dteWeekendPublicHolidayShiftEndTime.Value = null;
                        }
                    }
                    if (selectedDate.DayOfWeek != DayOfWeek.Friday && selectedDate.DayOfWeek != DayOfWeek.Saturday && selectedDate.DayOfWeek != DayOfWeek.Sunday)
                    {


                        lblDescriptionText.Text = "Normal Business Day: " + selectedDate.DayOfWeek;
                        //get shift type hours
                        int shiftID = 2;//normal Shift
                        if (_shiftTypeID == 1)
                        {
                            shiftID = 6;
                        }
                        SqlParameter[] parameters = new SqlParameter[2];
                        parameters[0] = new SqlParameter("@ShiftTypeID", _shiftTypeID);
                        parameters[1] = new SqlParameter("@ShiftID", shiftID);  //normal shift
                        DataTable dtshiftHours = Methods.ExecuteStoredProcedure("SpGetShiftTimes", parameters).Tables[0];

                        if (dtshiftHours.Rows.Count > 0)
                        {
                            string startTime = dtshiftHours.Rows[0]["StartTime"].ToString();
                            string endTime = dtshiftHours.Rows[0]["EndTime"].ToString();
                            if (startTime != string.Empty)
                            {
                                dteNormalShiftStartTime.Value = startTime;
                            }
                            else
                            {
                                dteNormalShiftStartTime.Value = null;
                            }
                            if (endTime != string.Empty)
                            {
                                dteNormalShiftEndTime.Value = endTime;
                            }
                            else
                            {
                                dteNormalShiftEndTime.Value = null;
                            }
                            dteMorningShiftStartTime.Value = null;
                            dteMorningShiftEndTime.Value = null;
                            dteEveningShiftStartTime.Value = null;
                            dteEveningShiftEndTime.Value = null;
                            dteMorningShiftEndTime.Value = null;
                            dteWeekendPublicHolidayShiftStartTime.Value = null;
                            dteWeekendPublicHolidayShiftEndTime.Value = null;
                        }
                    }
                    else
                    {
                        if (selectedDate.DayOfWeek != DayOfWeek.Friday)
                        {
                            lblDescriptionText.Text = "Weekend: " + selectedDate.DayOfWeek;
                            SqlParameter[] parameters = new SqlParameter[2];
                            parameters[0] = new SqlParameter("@ShiftTypeID", _shiftTypeID);
                            parameters[1] = new SqlParameter("@ShiftID", 4);  //weekend shift
                            DataTable dtshiftHours = Methods.ExecuteStoredProcedure("SpGetShiftTimes", parameters).Tables[0];

                            if (dtshiftHours.Rows.Count > 0)
                            {
                                string startTime = dtshiftHours.Rows[0]["StartTime"].ToString();
                                string endTime = dtshiftHours.Rows[0]["EndTime"].ToString();
                                if (startTime != string.Empty)
                                {
                                    dteWeekendPublicHolidayShiftStartTime.Value = startTime;
                                }
                                else
                                {
                                    dteWeekendPublicHolidayShiftStartTime.Value = null;
                                }
                                if (endTime != string.Empty)
                                {
                                    dteWeekendPublicHolidayShiftEndTime.Value = endTime;
                                }
                                else
                                {
                                    dteWeekendPublicHolidayShiftEndTime.Value = null;
                                }

                                dteNormalShiftStartTime.Value = null;
                                dteNormalShiftEndTime.Value = null;
                                dteMorningShiftStartTime.Value = null;
                                dteMorningShiftEndTime.Value = null;
                                dteEveningShiftStartTime.Value = null;
                                dteEveningShiftEndTime.Value = null;
                                dteMorningShiftEndTime.Value = null;
                            }
                        }
                    }

                }
                LoadAgentShiftTimes();
            }
            catch (Exception ex)
            {
                HandleException(ex);
            }
        }

        private void btnSave_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                bool? result = true;
                bool canSave = false;
                DataTable dtShiftTimes = Methods.GetTableData("select * from Shift");
                TimeSpan normalShiftStart = new TimeSpan(08, 30, 0);//these will be defaults if table has no data
                TimeSpan normalShiftEnd = new TimeSpan(16, 0, 0);
                TimeSpan eveningShiftStart = new TimeSpan(16, 0, 0);
                TimeSpan eveningShiftEnd = new TimeSpan(23, 59, 0);
                TimeSpan normalShift1Start = new TimeSpan(7, 30, 0);
                TimeSpan normalShift1End = new TimeSpan(15, 00, 0);
                double normalMaxHours = 8.5;
                double eveningMaxHours = 9;
                double normalShift1MaxHours = 7.5;
                double timeDiffNormalHours = 0;
                if (dtShiftTimes.Rows.Count > 0)
                {
                    foreach (DataRow rw in dtShiftTimes.Rows)
                    {
                        if (rw["ID"].ToString() == "2")//normal shift
                        {
                            normalShiftStart = (TimeSpan)rw["StartTime"];
                            normalShiftEnd = (TimeSpan)rw["EndTime"];
                            normalMaxHours = normalShiftEnd.Subtract(normalShiftStart).TotalHours;

                        }
                        if (rw["ID"].ToString() == "3")//evening shift
                        {
                            eveningShiftStart = (TimeSpan)rw["StartTime"];
                            eveningShiftEnd = (TimeSpan)rw["EndTime"];
                            eveningMaxHours = eveningShiftEnd.Subtract(eveningShiftStart).TotalHours;
                        }
                        if (rw["ID"].ToString() == "6")//normal shift 1
                        {
                            normalShift1Start = (TimeSpan)rw["StartTime"];
                            normalShift1End = (TimeSpan)rw["EndTime"];
                            normalShift1MaxHours = normalShift1End.Subtract(normalShift1Start).TotalHours;
                        }
                    }
                }
                if (_selectedAgentID > 0 && _selectedCampaignId > 0)
                {
                    UserHours userHours = new UserHours();
                    if (_selectedUserHourID > -1)
                    {
                        result = ShowMessageBox(new INMessageBoxWindow2(), "Would you like to Save Changes to the following times ?", "Save Changes ?", ShowMessageType.Information);
                        userHours = new UserHours(_selectedUserHourID);
                    }
                    if (Convert.ToBoolean(result) == true)
                    {
                        userHours.FKUserID = _selectedAgentID;
                        userHours.FKINCampaignID = _selectedCampaignId;
                        userHours.FKShiftTypeID = _shiftTypeID;
                        userHours.WorkingDate = DateTime.Parse(dteDate.Value.ToString());
                        if (dteMorningShiftStartTime.Value != null && dteMorningShiftEndTime.Value != null)
                        {
                            if (_isPublicHoliday == true)
                            {
                                ShowMessageBox(new INMessageBoxWindow1(), "Morning Time cannot be recorded for public Holiday ", "Incorrect Hours", ShowMessageType.Exclamation);
                                return;
                            }
                            DateTime shiftStart = DateTime.Parse(dteMorningShiftStartTime.Value.ToString());
                            DateTime shiftEnd = DateTime.Parse(dteMorningShiftEndTime.Value.ToString());

                            userHours.MorningShiftStartTime = shiftStart.TimeOfDay;
                            userHours.MorningShiftEndTime = shiftEnd.TimeOfDay;
                            canSave = true;
                        }
                        if (dteNormalShiftStartTime.Value != null && dteNormalShiftEndTime.Value != null)
                        {
                            //first check if its not public holiday
                            if (_isPublicHoliday == true)
                            {
                                ShowMessageBox(new INMessageBoxWindow1(), "Normal Time cannot be recorded for public Holiday ", "Incorrect Hours", ShowMessageType.Exclamation);
                                return;
                            }
                            DateTime shiftStart = DateTime.Parse(dteNormalShiftStartTime.Value.ToString());
                            DateTime shiftEnd = DateTime.Parse(dteNormalShiftEndTime.Value.ToString());
                            //check if shift exceeds 8.5 hours and 8 hours if selected date is friday
                            DateTime selectedDate = DateTime.Parse(dteDate.Value.ToString());
                            if (selectedDate.DayOfWeek == DayOfWeek.Friday)//8 hours max
                            {
                                double timeDiff = shiftEnd.Subtract(shiftStart).TotalHours;
                                timeDiffNormalHours = timeDiff;
                                if (_shiftTypeID == 2)
                                {
                                    if (shiftStart.TimeOfDay < normalShiftStart)
                                    {
                                        ShowMessageBox(new INMessageBoxWindow1(), "The Start Time is not allowed for Normal Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                        return;
                                    }

                                    if (timeDiff > (normalMaxHours))
                                    {
                                        ShowMessageBox(new INMessageBoxWindow1(), "The Hours You have captured Exceed the allowed time for Normal Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                        return;
                                    }
                                }
                                else
                                {
                                    if (shiftStart.TimeOfDay < normalShift1Start)
                                    {
                                        ShowMessageBox(new INMessageBoxWindow1(), "The Start Time is not allowed for Normal Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                        return;
                                    }

                                    if (timeDiff > (normalShift1MaxHours))
                                    {
                                        ShowMessageBox(new INMessageBoxWindow1(), "The Hours You have captured Exceed the allowed time for Normal Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                        return;
                                    }
                                }

                            }
                            else //8.5 hours max (normal time
                            {
                                double timeDiff = shiftEnd.Subtract(shiftStart).TotalHours;
                                timeDiffNormalHours = timeDiff;
                                if (_shiftTypeID == 2)
                                {
                                    if (shiftStart.TimeOfDay < normalShiftStart)
                                    {
                                        ShowMessageBox(new INMessageBoxWindow1(), "The Start Time is not allowed for Normal Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                        return;
                                    }
                                    if (shiftEnd.TimeOfDay > normalShiftEnd)
                                    {
                                        ShowMessageBox(new INMessageBoxWindow1(), "The End Time is not allowed for Normal Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                        return;
                                    }
                                    if (timeDiff > normalMaxHours)
                                    {
                                        ShowMessageBox(new INMessageBoxWindow1(), "The Hours You have captured Exceed the allowed time for Normal Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                        return;
                                    }
                                }
                                else
                                {
                                    if (shiftStart.TimeOfDay < normalShift1Start)
                                    {
                                        ShowMessageBox(new INMessageBoxWindow1(), "The Start Time is not allowed for Normal Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                        return;
                                    }
                                    if (shiftEnd.TimeOfDay > normalShift1End)
                                    {
                                        ShowMessageBox(new INMessageBoxWindow1(), "The End Time is not allowed for Normal Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                        return;
                                    }
                                    if (timeDiff > normalShift1MaxHours)
                                    {
                                        ShowMessageBox(new INMessageBoxWindow1(), "The Hours You have captured Exceed the allowed time for Normal Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                        return;
                                    }
                                }
                            }
                            userHours.NormalShiftStartTime = shiftStart.TimeOfDay;
                            userHours.NormalShiftEndTime = shiftEnd.TimeOfDay;
                            canSave = true;
                        }
                        if (dteEveningShiftStartTime.Value != null && dteEveningShiftEndTime.Value != null)
                        {
                            if (_isPublicHoliday == true)
                            {
                                ShowMessageBox(new INMessageBoxWindow1(), "Evening Time cannot be recorded for public Holiday ", "Incorrect Hours", ShowMessageType.Exclamation);
                                return;
                            }
                            DateTime shiftStart = DateTime.Parse(dteEveningShiftStartTime.Value.ToString());
                            DateTime shiftEnd = DateTime.Parse(dteEveningShiftEndTime.Value.ToString());

                            DateTime selectedDate = DateTime.Parse(dteDate.Value.ToString());
                            if (shiftEnd.TimeOfDay > eveningShiftEnd)
                            {
                                ShowMessageBox(new INMessageBoxWindow1(), "The End Time is not allowed for Evening Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                return;
                            }
                            if (selectedDate.DayOfWeek == DayOfWeek.Friday)
                            {
                                if (shiftStart.TimeOfDay < eveningShiftStart)
                                {
                                    ShowMessageBox(new INMessageBoxWindow1(), "The Start Time is not allowed for Evening Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                    return;
                                }
                            }
                            else
                            {
                                if (shiftStart.TimeOfDay < eveningShiftStart)
                                {
                                    ShowMessageBox(new INMessageBoxWindow1(), "The Start Time is not allowed for Evening Shift ", "Incorrect Hours", ShowMessageType.Exclamation);
                                    return;
                                }
                            }

                            userHours.EveningShiftStartTime = shiftStart.TimeOfDay;
                            userHours.EveningShiftEndTime = shiftEnd.TimeOfDay;
                            canSave = true;
                        }
                        if (dteWeekendPublicHolidayShiftStartTime.Value != null && dteWeekendPublicHolidayShiftEndTime.Value != null)
                        {
                            DateTime shiftStart = DateTime.Parse(dteWeekendPublicHolidayShiftStartTime.Value.ToString());
                            DateTime shiftEnd = DateTime.Parse(dteWeekendPublicHolidayShiftEndTime.Value.ToString());

                            userHours.PublicHolidayWeekendShiftStartTime = shiftStart.TimeOfDay;
                            userHours.PublicHolidayWeekendShiftEndTime = shiftEnd.TimeOfDay;
                            canSave = true;
                        }
                        if (canSave == true)
                        {
                            if (_selectedUserHourID == -1)
                            {
                                //check total hours already recorded for day shift
                                SqlParameter[] parameters = new SqlParameter[3];
                                parameters[0] = new SqlParameter("@AgentIDs", _selectedAgentID + ",");
                                parameters[1] = new SqlParameter("@FromDate", dteDate.Value);
                                parameters[2] = new SqlParameter("@ToDate", dteDate.Value);
                                DataTable dtData = Methods.ExecuteStoredProcedure("spReportHours", parameters).Tables[0];
                                double timeDiffRecordedNormalHours = 0;
                                TimeSpan totalHoursWorked = new TimeSpan(0, 0, 0);
                                if (dtData.Rows.Count > 0)
                                {
                                    foreach (DataRow rw in dtData.Rows)
                                    {
                                        if (rw["EmployeeName"].ToString() == cmbAgents.Text)
                                        {
                                            string totalNormaltTimeWorked = dtData.Rows[0]["TotalNormalTimeHoursWorked"].ToString().Replace(" ", "");
                                            totalHoursWorked = TimeSpan.Parse(totalNormaltTimeWorked);
                                            timeDiffRecordedNormalHours = double.Parse(totalHoursWorked.TotalHours.ToString());
                                        }
                                    }
                                }
                                //see if there is duplicate time for any campaign today
                                DateTime selDate = (DateTime)dteDate.Value;
                                DataTable dtTimesToday = Methods.GetTableData("select * from UserHours where WorkingDate = '" + selDate.ToString("yyyy-MM-dd") + "' and FKUserID = " + _selectedAgentID);
                                if (dtTimesToday.Rows.Count > 0)
                                {
                                    foreach (DataRow row in dtTimesToday.Rows)
                                    {
                                        if (dteMorningShiftStartTime.Value != null && dteMorningShiftEndTime.Value != null)
                                        {
                                            DateTime MorningTimeCapturedStart = DateTime.Parse(dteMorningShiftStartTime.Value.ToString());
                                            DateTime MorningTimeCapturedEnd = DateTime.Parse(dteMorningShiftEndTime.Value.ToString());

                                            string morningSavedStartStr = row["MorningShiftStartTime"].ToString();
                                            string morningSavedEndStr = row["MorningShiftEndTime"].ToString();
                                            if (morningSavedStartStr != string.Empty)
                                            {
                                                DateTime morningSavedStart = DateTime.Parse(morningSavedStartStr);
                                                DateTime morningSavedEnd = DateTime.Parse(morningSavedEndStr);
                                                if ((morningSavedStart.TimeOfDay == MorningTimeCapturedStart.TimeOfDay) && (morningSavedEnd.TimeOfDay == MorningTimeCapturedEnd.TimeOfDay))
                                                {
                                                    ShowMessageBox(new INMessageBoxWindow1(), "Cannot Insert Duplicate Morning Shift  Time ", "Incorrect Hours", ShowMessageType.Exclamation);
                                                    return;
                                                }
                                            }
                                        }
                                        if (dteNormalShiftStartTime.Value != null && dteNormalShiftEndTime.Value != null)
                                        {
                                            DateTime normalTimeCapturedStart = DateTime.Parse(dteNormalShiftStartTime.Value.ToString());
                                            DateTime normalTimeCapturedEnd = DateTime.Parse(dteNormalShiftEndTime.Value.ToString());

                                            string normalSavedStartStr = row["NormalShiftStartTime"].ToString();
                                            string normalSavedEndStr = row["NormalShiftEndTime"].ToString();
                                            if (normalSavedStartStr != string.Empty)
                                            {
                                                DateTime NormalSavedStart = DateTime.Parse(normalSavedStartStr);
                                                DateTime NormalSavedEnd = DateTime.Parse(normalSavedEndStr);
                                                if ((NormalSavedStart.TimeOfDay == normalTimeCapturedStart.TimeOfDay) && (NormalSavedEnd.TimeOfDay == normalTimeCapturedEnd.TimeOfDay))
                                                {
                                                    ShowMessageBox(new INMessageBoxWindow1(), "Cannot Insert Duplicate Normal Shift  Time ", "Incorrect Hours", ShowMessageType.Exclamation);
                                                    return;
                                                }
                                            }
                                        }

                                        if (dteEveningShiftStartTime.Value != null && dteNormalShiftEndTime.Value != null)
                                        {
                                            DateTime eveningTimeCapturedStart = DateTime.Parse(dteEveningShiftStartTime.Value.ToString());
                                            DateTime eveningTimeCapturedEnd = DateTime.Parse(dteEveningShiftEndTime.Value.ToString());

                                            string eveningSavedStartStr = row["EveningShiftStartTime"].ToString();
                                            string eveningSavedEndStr = row["EveningShiftEndTime"].ToString();
                                            if (eveningSavedStartStr != string.Empty)
                                            {
                                                DateTime eveningSavedStart = DateTime.Parse(eveningSavedStartStr);
                                                DateTime eveningSavedEnd = DateTime.Parse(eveningSavedEndStr);
                                                if ((eveningSavedStart.TimeOfDay == eveningTimeCapturedStart.TimeOfDay) && (eveningSavedEnd.TimeOfDay == eveningTimeCapturedEnd.TimeOfDay))
                                                {
                                                    ShowMessageBox(new INMessageBoxWindow1(), "Cannot Insert Duplicate Evening Shift  Time ", "Incorrect Hours", ShowMessageType.Exclamation);
                                                    return;
                                                }
                                            }
                                        }

                                        if (dteWeekendPublicHolidayShiftStartTime.Value != null && dteWeekendPublicHolidayShiftEndTime.Value != null)
                                        {
                                            DateTime weekendTimeCapturedStart = DateTime.Parse(dteWeekendPublicHolidayShiftStartTime.Value.ToString());
                                            DateTime weekendTimeCapturedEnd = DateTime.Parse(dteWeekendPublicHolidayShiftEndTime.Value.ToString());

                                            string weekendSavedStartStr = row["PublicHolidayWeekendShiftStartTime"].ToString();
                                            string weekendSavedEndStr = row["PublicHolidayWeekendShiftEndTime"].ToString();
                                            if (weekendSavedStartStr != string.Empty)
                                            {
                                                DateTime weekendSavedStart = DateTime.Parse(weekendSavedStartStr);
                                                DateTime weekendSavedEnd = DateTime.Parse(weekendSavedEndStr);
                                                if ((weekendSavedStart.TimeOfDay == weekendTimeCapturedStart.TimeOfDay) && (weekendSavedEnd.TimeOfDay == weekendTimeCapturedEnd.TimeOfDay))
                                                {
                                                    ShowMessageBox(new INMessageBoxWindow1(), "Cannot Insert Duplicate Public Holiday /Weekend Shift  Time ", "Incorrect Hours", ShowMessageType.Exclamation);
                                                    return;
                                                }
                                            }
                                        }




                                    }
                                }
                                Double totalNormalTime = timeDiffNormalHours + timeDiffRecordedNormalHours;
                                if (_shiftTypeID == 1)
                                {
                                    if (totalNormalTime > normalShift1MaxHours)
                                    {
                                        ShowMessageBox(new INMessageBoxWindow1(), "The Hours you are capturing exceed the day total ", "Incorrect Hours", ShowMessageType.Exclamation);
                                        return;
                                    }
                                }
                                else
                                {
                                    if (totalNormalTime > normalMaxHours)
                                    {
                                        ShowMessageBox(new INMessageBoxWindow1(), "The Hours you are capturing exceed the day total ", "Incorrect Hours", ShowMessageType.Exclamation);
                                        return;
                                    }
                                }
                                //add normal hours recorded to existing ones
                            }
                            userHours.Save(_validationResult);
                            ShowMessageBox(new INMessageBoxWindow1(), "Hours Record Succesfully Saved ", "Save result", ShowMessageType.Information);

                        }
                        else
                        {
                            ShowMessageBox(new INMessageBoxWindow1(), "Hours Could Not be Saved, please make sure all relevant fields are completed ", "Save result", ShowMessageType.Exclamation);
                        }
                        LoadAgentShiftTimes();
                    }
                    if (_selectedUserHourID > -1)//clear edit mode
                    {
                        StopEditing();
                    }

                }
                else
                {
                    ShowMessageBox(new INMessageBoxWindow1(), "Please Select Campaign And Agent ", "Select Campaign And Agent", ShowMessageType.Error);
                }

            }
            catch (Exception ex)
            {
                HandleException(ex);
            }
        }

        private void LoadAgentShiftTimes()
        {
            SqlParameter[] parameters = new SqlParameter[2];
            parameters[0] = new SqlParameter("@UserID", _selectedAgentID);
            parameters[1] = new SqlParameter("@WorkDate", dteDate.Value);
            DataTable dtAgentShiftTimes = Methods.ExecuteStoredProcedure("spGetAgentShiftTimes", parameters).Tables[0];
            if (dtAgentShiftTimes.Rows.Count > 0)
            {
                
                dgAgentTimes.ItemsSource = dtAgentShiftTimes.DefaultView;
                
                if (dgAgentTimes.Columns.Count == 4)
                {
                    dgAgentTimes.Columns[0].Visibility = Visibility.Hidden;
                    dgAgentTimes.Columns[1].Width = 220;
                    dgAgentTimes.Columns[2].Width = 200;
                    dgAgentTimes.Columns[3].Width = 100;
                }



            }
            else
            {
                dgAgentTimes.ItemsSource = null;
            }
        }

        private void cmbAgents_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (cmbAgents.SelectedItem != null)
                {
                    DataRowView selectedItem = (DataRowView)cmbAgents.SelectedItem;               
                    _selectedAgentID = long.Parse(selectedItem.Row[0].ToString());
                     LoadAgentShiftTimes();
                    
                }
            }
            catch (Exception ex)
            {
                HandleException(ex);
            }
        }

        private void cmbCampaigns_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                    if (cmbCampaigns.SelectedItem != null)
                    {
                        DataRowView selectedItem = (DataRowView)cmbCampaigns.SelectedItem;
                        _selectedCampaignId = long.Parse(selectedItem.Row[0].ToString());
                    }
                
            }
            catch (Exception ex)
            {
                HandleException(ex);
            }
        }

        private void dgAgentTimes_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                //get select hour user id
                if (dgAgentTimes.Items.Count > 0)
                {
                    DataRowView selectedItemRow = (DataRowView)dgAgentTimes.SelectedItem;
                    _selectedUserHourID = long.Parse(selectedItemRow.Row["UserHoursID"].ToString());
                    DataRow selectedItem = Methods.GetTableData("select * from UserHours where ID = " + _selectedUserHourID).Rows[0];
                    #region Campaign
                    cmbCampaigns.SelectedValue = selectedItem["FKINCampaignID"];
                    #endregion Campaign
                    #region Shift Type
                    cmbShiftType.SelectedValue = selectedItem["FKShiftTypeID"];
                    #endregion ShiftType
                    #region Morning Shift
                    string morningShiftStart = selectedItem["MorningShiftStartTime"].ToString();
                    string morningShiftEnd = selectedItem["MorningShiftEndTime"].ToString();
                    if (morningShiftStart != string.Empty)
                    {
                        dteMorningShiftStartTime.Value = morningShiftStart;
                    }
                    else
                    {
                        dteMorningShiftStartTime.Value = null;
                    }
                    if (morningShiftEnd != string.Empty)
                    {
                        dteMorningShiftEndTime.Value = morningShiftEnd;
                    }
                    else
                    {
                        dteMorningShiftEndTime.Value = null;
                    }
                    #endregion Morning Shift
                    #region Normal Shift
                    string normalShiftStart = selectedItem["NormalShiftStartTime"].ToString();
                    string normalShiftEnd = selectedItem["NormalShiftEndTime"].ToString();
                    if (normalShiftStart != string.Empty)
                    {
                        dteNormalShiftStartTime.Value = normalShiftStart;
                    }
                    else
                    {
                        dteNormalShiftStartTime.Value = null;
                    }
                    if (normalShiftEnd != string.Empty)
                    {
                        dteNormalShiftEndTime.Value = normalShiftEnd;
                    }
                    else
                    {
                        dteNormalShiftEndTime.Value = null;
                    }
                    #endregion Normal Shift
                    #region evening shift
                    string eveningShiftStart = selectedItem["EveningShiftStartTime"].ToString();
                    string eveningShiftEnd = selectedItem["EveningShiftEndTime"].ToString();
                    if (eveningShiftStart != string.Empty)
                    {
                        dteEveningShiftStartTime.Value = eveningShiftStart;
                    }
                    else
                    {
                        dteEveningShiftStartTime.Value = null;
                    }
                    if (eveningShiftEnd != string.Empty)
                    {

                        dteEveningShiftEndTime.Value = eveningShiftEnd;
                    }
                    else
                    {
                        dteEveningShiftEndTime.Value = null;
                    }
                    #endregion evening shift
                    #region weekend and public holiday
                    string weekendPublicHolidayStart = selectedItem["PublicHolidayWeekendShiftStartTime"].ToString();
                    string weekendPublicHolidayEnd = selectedItem["PublicHolidayWeekendShiftEndTime"].ToString();
                    if (weekendPublicHolidayStart != string.Empty)
                    {
                        dteWeekendPublicHolidayShiftStartTime.Value = weekendPublicHolidayStart;
                    }
                    else
                    {
                        dteWeekendPublicHolidayShiftStartTime.Value = null;
                    }
                    if (weekendPublicHolidayEnd != string.Empty)
                    {
                        dteWeekendPublicHolidayShiftEndTime.Value = weekendPublicHolidayEnd;
                    }
                    else
                    {
                        dteWeekendPublicHolidayShiftEndTime.Value = null;
                    }
                    #endregion weekend and public holiday

                    lblEditMode.Visibility = Visibility.Visible;
                    imgEditMode.Visibility = Visibility.Visible;
                    btnStopEditing.Visibility = Visibility.Visible;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex);
            }
        }

        private void btnStopEditing_Click(object sender, RoutedEventArgs e)
        {
            StopEditing();
        }
        private void StopEditing()
        {
            dgAgentTimes.ItemsSource = null;
            cmbCampaigns.SelectedValue = null;
            _selectedUserHourID = -1;
            lblEditMode.Visibility = Visibility.Collapsed;
            imgEditMode.Visibility = Visibility.Collapsed;
            btnStopEditing.Visibility = Visibility.Collapsed;

            dteDate.Value = DateTime.Now.Date.AddDays(-1);
            dteDate.Value = DateTime.Now.Date; //reason for this we want to trigger value changed event
        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                DataRowView selValue = (DataRowView)dgAgentTimes.SelectedValue;
                //get userHour id
                if (selValue != null)
                {
                    string columnName = selValue[2].ToString();
                    if (columnName != "Total Hours")
                    {
                        bool? result = ShowMessageBox(new INMessageBoxWindow2(), "Would you like to Remove following times ?" + Environment.NewLine
                            + columnName + " " + selValue[3].ToString(), "Save Changes ?", ShowMessageType.Information);
                        if (Convert.ToBoolean(result) == true)
                        {
                            long? UserHourID = long.Parse(selValue[0].ToString());

                            object param1 = Database.GetParameter("@UserHourID", UserHourID);
                            object[] paramArray = new[] { param1 };
                            Database.ExecuteDataSet(null, CommandType.StoredProcedure, "spRemoveHours", paramArray, 600);
                            ShowMessageBox(new INMessageBoxWindow1(), "Time Removed ", "Remove Result", ShowMessageType.Information);
                            LoadAgentShiftTimes();
                        }
                    }
                    else
                    {
                        ShowMessageBox(new INMessageBoxWindow1(), "Cannot Delete This Value ", "Remove Result", ShowMessageType.Exclamation);
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }






    }
}
